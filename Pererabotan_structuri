#define _CRT_SECURE_NO_WARNINGS
#include <windows.h>
#include <iostream>
#include <string>
#include <cstring>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Struct dorabotannie

#define MAX_NAME_LENGTH 50
#define MAX_APPEARANCE_LENGTH 100
#define MAX_PHONE_LENGTH 15
#define RESIDENTS_COUNT 5
#define FILENAME "res.txt"
#define RESULT_FILENAME "result.txt"

typedef struct {
    char hairColor[MAX_NAME_LENGTH];
    char clothes[MAX_APPEARANCE_LENGTH];
} Appearance;

typedef struct {
    char firstName[MAX_NAME_LENGTH];
    char lastName[MAX_NAME_LENGTH];
    char id[3]; // Идентификационный номер из 2 цифр
    Appearance appearance;
    char phone[MAX_PHONE_LENGTH];
} Resident;

typedef struct {
    char firstName[MAX_NAME_LENGTH];
    char lastName[MAX_NAME_LENGTH];
    char id[3];
    Appearance appearance;
} VisitorPass;

typedef struct {
    Resident resident;
    int isMatch;
    const char* discrepancyReason;
} CheckResult;

// Функция инициализации данных жильцов из файла
void initializeResidents(Resident residents[], int* count) {
    FILE* file = fopen(FILENAME, "r");
    if (file == NULL) {
        puts("Ошибка открытия файла");
        exit(1);
    }

    *count = 0;
    while (*count < RESIDENTS_COUNT && fscanf(file, "%[^;];%[^;];%[^;];%[^;];%[^;];%[^\n]\n",
        residents[*count].firstName,
        residents[*count].lastName,
        residents[*count].id,
        residents[*count].appearance.hairColor,
        residents[*count].appearance.clothes,
        residents[*count].phone) != EOF) {
        (*count)++;
    }
    if (*count == 0) {
        puts("Ой. Похоже, что в этом доме ещё никто не живёт!\n");
        exit(1);
     }

    fclose(file);
}

// Функция ввода данных жильца, который пришёл на проверку
void inputVisitorPass(VisitorPass* visitor) {
    printf("Введите имя: ");
    gets_s(visitor->firstName);
    printf("Введите фамилию: ");
    gets_s(visitor->lastName);
    printf("Введите идентификационный номер (2 цифр): ");
    gets_s(visitor->id);
    printf("Введите цвет волос: ");
    gets_s(visitor->appearance.hairColor);
    printf("Введите одежду: ");
    gets_s(visitor->appearance.clothes);
}

// Функция проверки данных
CheckResult checkVisitor(const Resident residents[], VisitorPass visitor, int chel) {
    CheckResult result = { 1 };
    
    int i = chel;
        int a = 0;
        if (strcmp(residents[i].firstName, visitor.firstName) != 0) {
            result.discrepancyReason = "Неправильное имя";
            a++;
        }
        else if (strcmp(residents[i].lastName, visitor.lastName) != 0) {
            result.discrepancyReason = "Неправильная фамилия";
            a++;
        }
        else if (strcmp(residents[i].id, visitor.id) != 0) {
            result.discrepancyReason = "Неправильный id";
            a++;
        }
        else if(strcmp(residents[i].appearance.hairColor, visitor.appearance.hairColor) != 0) {
            result.discrepancyReason = "Неправильный цвет волос";
            a++;
        }
        else if (strcmp(residents[i].appearance.clothes, visitor.appearance.clothes) != 0) {
            result.discrepancyReason = "Неправильная одежда";
            a++;
        }
        if (a == 0) {
            result.isMatch = 1;
            return result;
        }
        else result.isMatch = 0;
    return result;
}

void callResident(const Resident* resident, int f) {
    printf("Звонок на номер: %s\n", resident->phone);
    // Симуляция звонка
    for (int i = 0; i < 3; ++i) {
        printf("Звонок...\n");
        Sleep(1000); // Задержка 1 секунда
    }
    if (f == 1) {
        printf("Ответ: Я дома!\n"); // Двойник
    }
    else {
        printf("Ответа нет.\n"); // Настоящий житель не отвечает
    }
}

// Функция для поиска жильца по ID
int findResidentById(const Resident residents[], const char* id) {
    for (int i = 0; i < RESIDENTS_COUNT; i++) {
        if (strcmp(residents[i].id, id) == 0) {
            return i; // Возвращаем индекс жильца с совпадающим ID
        }
    }
    return -1; // Нет совпадения 
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    Resident residents[RESIDENTS_COUNT];
    VisitorPass visitor;
    int totalActualResidents = 0;
    int totalMonsters = 0;
    int totalActResNOT = 0;
    int totalMonsNOT = 0;

    int residentCount;
    initializeResidents(residents, &residentCount);

    FILE* resultFile = fopen(RESULT_FILENAME, "a");
    if (resultFile == NULL) {
        printf("Не удалось открыть файл для записи.\n");
        return 1;
    }

    // Количество проходов игры
    int proh = 0;

    while (1) {
        int chel = rand() % 5;
        //printf("\nchel = %d\n", chel);

        // Ввод данных пришедшего жильца
        inputVisitorPass(&visitor);

        // Проверка данных
        char prop, zvon;
        CheckResult result = checkVisitor(residents, visitor, chel);
        int f = 0;
        if (result.isMatch) {
            printf("\nДанные совпадают. Допуск разрешён.\n");
            printf("\nВы хотите позвонить в квартиру жильца?(y/n)\n");
            scanf("%c", &zvon);
            while (getchar() != '\n'); // Очистка буфера
            if(zvon == 'y' || zvon == 'Y') callResident(&residents[chel], f);// Звонок настоящему жильцу
            puts("Вы хотите его пропустить? (y/n)\n");
            scanf(" %c", &prop);
            while (getchar() != '\n'); // Очистка буфера
            if (prop == 'y' || prop == 'Y') {
                totalActualResidents++;
            }
            else totalActResNOT++;
        }
        else {
            printf("\nДанные не совпадают. Возможно, это монстр-двойник! Причина: %s\n", result.discrepancyReason);
            printf("\nВы хотите позвонить в квартиру жильца?(y/n)\n");
            scanf("%c", &zvon);
            while (getchar() != '\n'); // Очистка буфера
            if (zvon == 'y' || zvon == 'Y') {
                // Попробуем найти жильца по ID
                int residentIndex = findResidentById(residents, visitor.id);
                if (residentIndex != -1) {
                    f = 1;
                    callResident(&residents[chel], f); // Звонок настоящему жильцу
                }
                else {
                    printf("Не удалось найти жильца с ID %s.\n", visitor.id);
                }
            }
            puts("Вы хотите его пропустить? (y/n)\n");
            scanf(" %c", &prop);
            while (getchar() != '\n'); // Очистка буфера
            if (prop == 'y' || prop == 'Y') {
                totalMonsters++;
                puts("Вы убиты! Game over!");
                break;
            }
            else totalMonsNOT++;
        }

        proh++;
        if (proh == 5) {
            puts("\nПоздравляем! Вы не погибли сегодня!\n");
            break;
        }

        char continueChecking;
        printf("Хотите продолжить проверку? (y/n): ");
        scanf(" %c", &continueChecking);
        while (getchar() != '\n'); // Очистка буфера
        if (continueChecking != 'y' && continueChecking != 'Y') {
            break;
        }
    }
    printf("\nРезультаты этой игры: \n");
    printf("Настоящих жильцов пропущено: %d\n", totalActualResidents);
    printf("Монстров-двойников пропущено: %d\n", totalMonsters);
    printf("Настоящих жильцов не пропущено: %d\n", totalActResNOT);
    printf("Монстров-двойников не пропущено: %d\n", totalMonsNOT);

    fprintf(resultFile, "Настоящих жильцов пропущено: %d\n", totalActualResidents);
    fprintf(resultFile, "Монстров-двойников пропущено: %d\n", totalMonsters);
    fprintf(resultFile, "Настоящих жильцов не пропущено: %d\n", totalActResNOT);
    fprintf(resultFile, "Монстров-двойников не пропущено: %d\n", totalMonsNOT);

    fclose(resultFile);
    printf("Результаты проверки записаны в файл results.txt\n");

    char rec;
    printf("\nХотите узнать рекорды за всё время?(y/n)\n");
    scanf("%c", &rec);
    while (getchar() != '\n'); // Очистка буфера
    if (rec == 'y' || rec == 'Y') {
        FILE* resultFile1 = fopen(RESULT_FILENAME, "r");
        if (resultFile1 == NULL) {
            printf("Не удалось открыть файл для чтения.\n");
            return 1;
        }
        char s[40];
        int A[80];
        int i = 0;
        while (1) {
            if (fscanf(resultFile1, "%[^:]: %d\n", s, &A[i]) == EOF) break;
            i++;
        }
        int itogI = i;
        i = 0;
        while (i < itogI) {
            //printf("%d ", A[i]);
            i++;
        }
        i = 0;
        int itog1, itog2, itog3, itog4;
        itog1 = A[i];
        itog2 = A[i + 1];
        itog3 = A[i + 2];
        itog4 = A[i + 3];
        while (i < (itogI - 1)) {
            if (A[i + 4] > itog1) itog1 = A[i + 4];
            i++;
            if (A[i + 4] > itog2) itog2 = A[i + 4];
            i++;
            if (A[i + 4] > itog3) itog3 = A[i + 4];
            i++;
            if (A[i + 4] > itog4) itog4 = A[i + 4];
            i++;
        }
        printf("\nРекорд пропускания настоящих жильцов: %d.\n", itog1);
        printf("Рекорд пропускания монстров-двойников: %d.\n", itog2);
        printf("Больше всего не пропущенных настоящих жильцов: %d.\n", itog3);
        printf("Больше всего не пропущенных монстров-двойников: %d.\n", itog4);
        fclose(resultFile1);
    }

    return 0;
}
